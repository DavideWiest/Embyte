@namespace Embyte.Pages

@page "/embed/"
@using MudBlazor
@using Embyte.Shared.Product
@using Embyte.Modules
@using Embyte.Data.Storage
@using System.Net
@using Embyte.Shared.BaseUI
@layout EmbedLayout
@inject Constants constants
@inject MainStorage mainstorage
@inject NavigationManager NavigationManager

@if (!showError)
{
    <Embed Url="@TargetUrl" ShowStatus="@ShowStatus" ShowRequestCount="@ShowRequestCount" ShowImage="@ShowImage" MinimalVersion="@MinimalVersion"/>
} else
{
    <p>
        Invalid Url
    </p>
}


@code {
    public string TargetUrl { get; set; } = EmbyteStorage.DefaultUrl;
    public bool ShowStatus = false;
    public bool ShowRequestCount = false;
    public bool ShowImage = true;
    public bool MinimalVersion = false;

    private bool showError = false;

    private Dictionary<string, string> queryParameters = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        // Get the current URL
        var uri = new Uri(NavigationManager.Uri);

        // Extract query parameters
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (string key in queryParams)
        {
            if (queryParams[key] != null)
                queryParameters.Add(key, queryParams[key] ?? string.Empty);

        }

        if (queryParameters.ContainsKey("url"))
            TargetUrl = queryParameters["url"];

        if (queryParameters.ContainsKey("show-status"))
            ShowStatus = queryParameters["show-status"].ToLower() == "true";

        if (queryParameters.ContainsKey("show-requestcount"))
            ShowRequestCount = queryParameters["show-requestcount"].ToLower() == "true";

        if (queryParameters.ContainsKey("show-image"))
            ShowImage = queryParameters["show-image"].ToLower() == "true";

        if (queryParameters.ContainsKey("minimalversion"))
            MinimalVersion = queryParameters["minimalversion"].ToLower() == "true";
    }

    private string GetDecodedSanitizedUrl()
    {
        if (!WebHelper.CorrectUrlPattern(TargetUrl))
        {
            showError = true;
        }
        return TargetUrl;
    }
}