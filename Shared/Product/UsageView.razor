@namespace Embyte.Shared.Product

@using MudBlazor
@using Embyte.Shared
@using Embyte.Modules
@using Embyte.Modules.Logging
@using Embyte.Data.Storage
@using Embyte.Modules.Db
@using Embyte.Data.Models
@inject WebsiteUsageManager wum
@inject IJSRuntime JsRuntime

<h1 class="text-2xl md:text-4xl text-b600 m-3 mb-1 text-center">
    Most popular embeds
</h1>
<p class="mb-3 text-center">
    Sorted by total requests
</p>

<div class="md:flex md:flex-col md:items-center my-12">
    <div class="max-w-3xl">
        @foreach (var (usage, index) in websiteUsages.Select((usage, index) => (usage, index)))
        {
            <div class="md:flex">
                <div class="flex">
                <p class="code text-gray-500 px-2 w-16 text-right">@(index + 1).</p>
                <div class="w-64 md:w-80 overflow-x-hidden whitespace-nowrap">
                        <a href="@(EmbyteStorage.absoluteEmbedViewEndpoint + "?url=" + usage.Url)" target="_blank">
                    <MudButton Style="text-transform: none; padding: 0;"><p class="code px-2">@usage.Url</p></MudButton>
                    </a>
                </div>
                </div>
                <div class="flex">
                    <p class="px-2 w-16 text-right">@usage.RequestCount</p>
                    <div class="flex items-center">
                        <div style="width: @(graphWidths[index])px; height: 4px;" class="bg-purple-500 rounded-xl"></div>
                    </div>
                </div>
            </div>
        }
    </div>
    @if (websiteUsages.Count % itemsPerPage == 0)
    {
        <MudButton OnClick="LoadMoreItems" Color="Color.Primary" Variant="Variant.Filled" Class="m-5 rounded-xl px-6">Load More</MudButton>
    }
</div>



@code {
    [Parameter]
    public string Url { get; set; } = EmbyteStorage.DefaultUrl;
    private List<WebsiteUsage> websiteUsages = new();
    private int currentPage = 1; // Current page number
    private int itemsPerPage = 50; // Items to load per page
    private int availableSpacePx = 400;
    private List<int> graphWidths = new();

    private void LoadMoreItems()
    {
        // Increment the current page
        currentPage++;

        // Load the next batch of items
        var newItems = LoadItems(currentPage, itemsPerPage);

        // Append the new items to the existing list
        websiteUsages.AddRange(newItems);
    }

    private List<WebsiteUsage> LoadItems(int page, int limit)
    {
        // Calculate the offset based on the page number
        int offset = (page - 1) * limit;

        // Retrieve items from the manager
        return wum.ReadEntries(limit, offset);
    }

    protected override void OnInitialized()
    {

        // Load the initial set of items
        var newItems = LoadItems(currentPage, itemsPerPage);

        // Append the new items to the existing list
        websiteUsages.AddRange(newItems.Where(item => item != null));

        foreach (var wu in websiteUsages)
        {  
            graphWidths.Add(getPixelWidth(wu.RequestCount, false));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            return;

        List<int> graphWidthsNew = new();

        foreach (var wu in websiteUsages)
        {
            graphWidthsNew.Add(getPixelWidth(wu.RequestCount, true));
        }
        graphWidths = graphWidthsNew;
    }

    private int getPixelWidth(int requestCount, bool relativeToWindowSize)
    {
        relativeToWindowSize = false;
        int ww = relativeToWindowSize ? GetWindowWidth() : 650;
        int wwStandard = 1000; // 1000px as standard for this calculation
        var l = (int)Math.Round((double)((double)availableSpacePx / websiteUsages[0].RequestCount * requestCount * ww / wwStandard), MidpointRounding.AwayFromZero);
        return l;
    }

    private int GetWindowWidth()
    {
        var dimension = ((IJSInProcessRuntime)JsRuntime).Invoke<WindowDimension>("getWindowDimensions");
        var height = dimension.Height;
        var width = dimension.Width;
        return width;
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}