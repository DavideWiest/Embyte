@namespace Embyte.Shared.Product

@using MudBlazor
@using Embyte.Shared
@using Embyte.Modules
@using Embyte.Modules.Product
@using Embyte.Data.Storage
@using Embyte.Data.Product
@using Embyte.Modules.Db
@using Embyte.Modules.Logging
@inject Constants constants
@inject MainStorage mainstorage
@inject WebsiteUsageManager usageManager
@inject WebsiteInfoGetter websiteInfoGetter

<div class="flex justify-center">
<div>
    <MudCard Class="relative max-w-3xl max-h-2xl rounded-lg shadow-xl flex bg-neutral-900 overflow-hidden" Style="width: min(100vw, 34rem)">
        <div class="absolute h-full" style="@("background: " + (ColorOverwrite ?? info.ThemeColor) + "; width: 6px !important; overflow: hidden; white-space: nowrap;")">

        </div>
        <div class="p-3 relative ml-2" style="width: calc(100%-10px);">
            @if (!displayLoading)
            {
                <a href="@info.Url" target="_blank">
                @if (!string.IsNullOrEmpty(info.FavIconUrl)) {
                <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar>
                                <MudImage Src="@info.FavIconUrl" Alt="@("Favicon of " + @info.Title)"></MudImage>
                            </MudAvatar>
                        </CardHeaderAvatar>
                    <CardHeaderContent>
                        
                        <MudText Typo="Typo.h6" Class="text-blue-500 text-b600">@info.Title</MudText>
                        @if (!MinimalVersion)
                        {
                            <MudText Typo="Typo.body2" Class="text-slate-500">
                                @info.SiteName @(string.IsNullOrEmpty(info.SiteType) ? "" : "• " + info.SiteType) 
                                @*@(string.IsNullOrEmpty(info.PersonName) ? "" : "• " + info.PersonName)*@
                            </MudText>
                        }
                    </CardHeaderContent>
                    </MudCardHeader>
                } else
                {
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@info.Title</MudText>
                            <MudText Typo="Typo.body2" Class="text-slate-500">@info.SiteName @(string.IsNullOrEmpty(info.SiteType) ? "" : "• " + info.SiteType) @*@(string.IsNullOrEmpty(info.PersonName) ? "" : "• " + info.PersonName)*@</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                }
                </a>
                @if (!string.IsNullOrEmpty(info.ImageUrl) && ShowImage)
                {
                    <MudCardMedia Image="@info.ImageUrl" Class="rounded-lg" />
                }
                <div class="max-h-42 md:max-h-36" style="overflow-y: auto;">
                    @if (!string.IsNullOrEmpty(info.Description))
                    {
                        <div class="p-2 py-3">
                            <MudText Typo="Typo.body2">@info.Description</MudText>
                        </div>
                    }
                    @if (!MinimalVersion)
                    {
                        <div>
                            @foreach (var keyword in info.Keywords)
                            {
                                <p class="inline-block p-1.5 text-sm px-2 m-1 bg-black rounded-lg text-gray-500">
                                    @keyword
                                </p>
                            }
                        </div>  
                    }
                </div>
            } else
            {
                <div class="flex justify-center items-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </div>
            }
        </div>
    </MudCard> 

@if (ShowStatus || ShowRequestCount)
{
    <div class="mt-4">
        <p class="text-xs" style="color: rgb(112 118 134)">
            @if (ShowRequestCount) {
                @($"Request count: {getRequestCount(Url)}") 
            }
            @if (ShowRequestCount && ShowStatus)
            {
                @(" • ")
            }
            @if (ShowStatus)
            {
                    @($"Request: {status.requestDurationMS}ms • Status: {status.statusType}")
                        if (status.statusType == WebsiteInfoStatusType.cacheSuccess && status.CacheDateInfo != null)
                    {
                            @($" ({status.CacheDateInfo.Item1.ToString("yy-MM-dd")} - {status.CacheDateInfo.Item2.ToString("yy-MM-dd")})")
                    }
            }
            
        </p>
    </div>
}
    </div>
</div>

@code {
    private string _url = EmbyteStorage.DefaultUrl;

    [Parameter]
    public string Url { get { return _url; } set { _url = value; RerenderEmbed(); } }
    private string prevUrl { get; set; } = string.Empty;

    private WebsiteInfo info = default!;
    public WebsiteInfoStatus status = default!;

    private bool displayLoading = true;

    [Parameter]
    public bool ShowStatus { get; set; } = false;
    [Parameter]
    public bool ShowRequestCount { get; set; } = false;
    [Parameter]
    public bool ShowImage { get; set; } = true;
    [Parameter]
    public bool MinimalVersion { get; set; } = false;

    private bool _disableCache = false;
    [Parameter]
    public bool DisableCache { get { return _disableCache; } set { _disableCache = value; RerenderEmbed(); } }
    [Parameter]
    public string? ColorOverwrite { get; set; } = null;

    protected override void OnInitialized()
    {

        // RerenderEmbed();
    }

    public void RerenderEmbed()
    {
        displayLoading = true;
        Log.Debug("RerenderEmbed called");

        Console.WriteLine($"2 Disable cache: {DisableCache}");

        (info, status) = websiteInfoGetter.Get(Url, !DisableCache);
        //(info, status) = WebsiteInfoExtractor.GetMetaDataFromUrl(Url);
        info.validateData();

        if (!WebsiteInfoExtractor.IsImage(info.ImageUrl))
            info.ImageUrl = string.Empty;

        if (!WebsiteInfoExtractor.IsImage(info.FavIconUrl))
            info.ImageUrl = string.Empty;

        Log.Debug(status.ToString());

        Log.Debug("Title: {info}", info.Title);

        if (Url != prevUrl)
        {
            usageManager.SaveRequest(UrlHelper.TrimDoubleHttpses(Url));
        }
        prevUrl = Url;

        displayLoading = false;

        Log.Debug("rerender finished");
    }   

    private int getRequestCount(string url)
    {
        return usageManager.GetRequestCount(url);
    }
}